version: "3"
services:

  # TODO: migrate data: logs / libs / pdfs (blog)

  # certbot:
  #   image: certbot/certbot
  #   restart: "no"
  #   volumes:
  #     - /etc/letsencrypt:/etc/letsencrypt
  #     - ./var/letsencrypt:/var/lib/letsencrypt
  #     - ./var/acme:/var/www/acme
  #   command: certbot renew --renew-hook 'touch /var/www/.updated'
  #   cap_drop:
  #     - all

# ----------------------------------------
# webserver / reverse proxy
# ----------------------------------------

  nginx:
    image: nginx
    restart: always
    volumes:
      - ./etc/nginx:/etc/nginx/
      - /etc/letsencrypt:/etc/letsencrypt
      - ./var/acme:/var/www/acme
      - ./var/blog:/var/www/blog
      - ./var/nginx:/var/log/nginx
    ports:
      - "443:443"
      - "80:80"
      # tty-proxy
      - "6543:6543"
    cap_drop:
      - all
    cap_add:
      - chown
      - dac_override
      - net_bind_service
      - setgid
      - setuid
    depends_on:
      # - blog
      - ddns
      - ejabberd
      - gogs
      - synapse
      - element
      - sudoku
      - syncthing
      - tty-proxy
      - web
    networks:
      - default
      - meet.jitsi
      - matrix
      - ddns
      - weblate

  logrotate:
    build: ./modules/logrotate
    restart: always
    volumes:
      - ./etc/logrotate:/etc/logrotate.d
      - ./var/nginx:/var/log/nginx
      - ./var/murmur/log:/var/log/murmur
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - nginx
      - murmur

# ----------------------------------------
# website
# ----------------------------------------

  blog:
    build: modules/blog
    restart: "no"           # build + exit
    volumes:
      - ./modules/blog:/blog
      - ./var/blog:/blog/_build
    command: /blog/bin/blogdown build
    cap_drop:
      - all

  sudoku:
    build: modules/sudoku
    restart: always
#   ports:
#     - "3000:3000"
    cap_drop:
      - all

#   pycbox:
#     build: modules/pycbox
#     restart: always
# #   ports:
# #     - "5000:5000"
#     volumes:
#       - ./modules/pycbox/pycbox:/pycbox/pycbox
#       - ./var/pycbox/files:/pycbox/files
#       - ./var/pycbox/cache:/pycbox/cache
#       - ./var/pycbox/hilite:/pycbox/hilite
#     cap_drop:
#       - all
#     cap_add:
#       - chown
#       - setgid
#       - setuid

# ----------------------------------------
# gogs
# ----------------------------------------

  gogs:
    image: gogs/gogs
    restart: always
    volumes:
      - "./var/gogs:/data"
    ports:
      - "22:22"
#     - "3000:3000"
    cap_drop:
      - all
    cap_add:
      - chown
      - dac_override
      - fowner
      - kill
      - net_bind_service
      - setgid
      - setuid
      - sys_chroot

# ----------------------------------------
# mumble
# ----------------------------------------

  murmur:
    build: modules/murmur
    restart: always
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - ./etc/murmur:/etc/murmur
      - ./var/murmur/log:/var/log/murmur
      - ./var/murmur/lib:/var/lib/murmur
    ports:
      - "64738:64738/tcp"
      - "64738:64738/udp"
   #cap_drop:
   #  - all
   #cap_add:
   #  - chown
   #  - dac_override
   #  - setgid
   #  - setuid

# ----------------------------------------
# jabber
# ----------------------------------------

  ejabberd:
    build: modules/ejabberd
    restart: always
    volumes:
      - ./etc/ejabberd:/home/ejabberd/conf
      - ./var/ejabberd/database:/home/ejabberd/database
      - ./var/ejabberd/logs:/home/ejabberd/logs
      - ./var/ejabberd/ssl:/home/ejabberd/ssl
      - ./var/ejabberd/upload:/home/ejabberd/upload
    ports:
      - "1883:1883"     # mod_mqtt
      - "5222:5222"     # ejabberd_c2s
      - "5269:5269"     # ejabberd_s2s_in
    # tunneled through nginx:
    # - "5280:5280"     # ejabberd_http/http
    # - "5443:5443"     # ejabberd_http/https
    environment:
      - TZ=Europe/Berlin
    cap_drop:
      - all

# ----------------------------------------
# syncthing
# ----------------------------------------

  syncthing:
    image: lscr.io/linuxserver/syncthing
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
    volumes:
      - ./var/syncthing/config:/config
      - ./var/syncthing/data1:/data1
      - ./var/syncthing/data2:/data2
    ports:
      # - 8384:8384
      - 22000:22000/tcp
      - 22000:22000/udp
      - 21027:21027/udp
    restart: unless-stopped

# ----------------------------------------
# mailserver
# ----------------------------------------

  mailserver:
    image: docker.io/mailserver/docker-mailserver:latest
    restart: always
    hostname: mail
    domainname: coldfix.de
    ports:
      - "25:25"    # SMTP  (explicit TLS => STARTTLS)
      - "143:143"  # IMAP4 (explicit TLS => STARTTLS)
      - "465:465"  # ESMTP (implicit TLS)
      - "587:587"  # ESMTP (explicit TLS => STARTTLS)
      - "993:993"  # IMAP4 (implicit TLS)
    volumes:
      - ./var/mail/conf:/tmp/docker-mailserver
      - ./var/mail/data:/var/mail
      - ./var/mail/state:/var/mail-state
      - ./var/mail/log:/var/log/mail
      - /etc/localtime:/etc/localtime:ro
      - /etc/letsencrypt:/etc/letsencrypt
    environment:
      # services:
      - ENABLE_CLAMAV=1         # Antivirus
      - ENABLE_FAIL2BAN=1       # Ban IPs after 3 failed login attempts
      - ENABLE_POSTGREY=1
      - ENABLE_SPAMASSASSIN=1
      - ENABLE_QUOTAS=0
      - ENABLE_POP3=0
      # options:
      - POSTGREY_DELAY=50
      - SPAMASSASSIN_SPAM_TO_INBOX=1
      - POSTFIX_MESSAGE_SIZE_LIMIT=134217728    # 128 MiB
      - PFLOGSUMM_TRIGGER=logrotate
      - LOGWATCH_INTERVAL=weekly
      - LOGROTATE_INTERVAL=monthly
      - ONE_DIR=1
      - SSL_TYPE=letsencrypt
    stop_grace_period: 1m
    cap_add:
      - NET_ADMIN
      - SYS_PTRACE

# ----------------------------------------
# tty-proxy
# ----------------------------------------

  tty-proxy:
    build: modules/tty-proxy
    restart: always
    # ports:
    # - "6543:3456"
    # - "8080:8080"
    environment:
      URL: https://tty.coldfix.de
    cap_drop:
      - all

# ----------------------------------------
# dyndns
# ----------------------------------------

  # dyndns:
  ddns:
    restart: always
    build:
      context: modules/ddns
      dockerfile: docker/ddns/Dockerfile
    depends_on:
      - ddns_redis
#   ports:
#     - "8082:8080"
    environment:
      DDNS_DOMAIN:     dns.coldfix.de
      DDNS_SOA_DOMAIN: ddns.coldfix.de
      DDNS_REDIS_HOST: ddns_redis:6379
      DDNS_EXPIRATION_DAYS: 180
    networks:
      ddns:

  ddns_powerdns:
    build: modules/ddns/docker/powerdns
    restart: always
    depends_on:
      - ddns
    ports:
      - "53:53/udp"
    environment:
      PDNS_REMOTE_HTTP_HOST: ddns:8053
    networks:
      ddns:

  ddns_redis:
    restart: always
    image: redis:4-alpine
    volumes:
      - "./var/ddns:/data"
    networks:
      ddns:

# ----------------------------------------
# weblate
# ----------------------------------------

  weblate:
    image: weblate/weblate
    restart: unless-stopped
    volumes:
      - ./var/weblate/data:/app/data
    tmpfs:
      - /app/cache
    env_file:
      - ./etc/weblate/env
    depends_on:
      - weblate-database
      - weblate-cache
    networks:
      weblate:
    environment:
      # Needed due to https://github.com/WeblateOrg/weblate/issues/7451
      WEBLATE_DEFAULT_PULL_MESSAGE: |
        Translations update from {{ site_title }}

        Translations update from [{{ site_title }}]({{ site_url }}) for [{{ project_name }}/{{ component_name }}]({{url}}).

        {% if component_linked_childs %}
        It also includes following components:
        {% for linked in component_linked_childs %}
        * [{{ linked.project_name }}/{{ linked.name }}]({{ linked.url }})
        {% endfor %}
        {% endif %}

        Current translation status:

        ![Weblate translation status]({{widget_url}})

  weblate-database:
    image: postgres:14-alpine
    restart: unless-stopped
    volumes:
      - ./var/weblate/postgres:/var/lib/postgresql/data
    env_file:
      - ./etc/weblate/env
    networks:
      weblate:

  weblate-cache:
    image: redis:6-alpine
    restart: unless-stopped
    command: [redis-server, --save, '60', '1']
    volumes:
      - ./var/weblate/redis:/data
    networks:
      weblate:

# ----------------------------------------
# matrix
# ----------------------------------------

  synapse:
    image: matrixdotorg/synapse
    restart: unless-stopped
    volumes:
      - ./var/matrix:/data
    environment:
      - TZ=Europe/Berlin
    networks:
      matrix:

  element:
    image: vectorim/element-web
    restart: unless-stopped
    volumes:
      - ./etc/element/config.json:/app/config.json
    networks:
      matrix:
    depends_on:
      - synapse

# ----------------------------------------
# Jitsi
# ----------------------------------------

  # Frontend
  web:
    image: jitsi/web:stable-7001
    restart: unless-stopped
    volumes:
      - ./var/jitsi/web:/config:Z
      - ./var/jitsi/web/crontabs:/var/spool/cron/crontabs:Z
      - ./var/jitsi/transcripts:/usr/share/jitsi-meet/transcripts:Z
    env_file:
      - ./var/jitsi/env
    networks:
      meet.jitsi:
        aliases:
          - web.meet.jitsi

  # XMPP server
  prosody:
    image: jitsi/prosody:stable-7001
    restart: unless-stopped
    expose:
      - '5222'
      - '5347'
      - '5280'
    volumes:
      - ./var/jitsi/prosody/config:/config:Z
      - ./var/jitsi/prosody/prosody-plugins-custom:/prosody-plugins-custom:Z
    env_file:
      - ./var/jitsi/env
    networks:
      meet.jitsi:
        aliases:
          - xmpp.meet.jitsi

  # Focus component
  jicofo:
    image: jitsi/jicofo:stable-7001
    restart: unless-stopped
    volumes:
      - ./var/jitsi/jicofo:/config:Z
    env_file:
      - ./var/jitsi/env
    depends_on:
      - prosody
    networks:
      meet.jitsi:

  # Video bridge
  jvb:
    image: jitsi/jvb:stable-7001
    restart: unless-stopped
    ports:
      - 10000:10000/udp
    volumes:
      - ./var/jitsi/jvb:/config:Z
    env_file:
      - ./var/jitsi/env
    depends_on:
      - prosody
    networks:
      meet.jitsi:

  # TURN/STUN server
  coturn:
    image: coturn/coturn
    restart: unless-stopped
    volumes:
      - ./etc/coturn:/etc/coturn
      - /etc/letsencrypt:/etc/letsencrypt:ro
    # network_mode: host
    ports:
      - "3478:3478"
      - "3479:3479"
      - "5349:5349"
      - "5350:5350"
      - "49160-49200:49160-49200/udp"

# Custom network so all services can communicate using a FQDN
networks:
    meet.jitsi:
    matrix:
    ddns:
    weblate:
